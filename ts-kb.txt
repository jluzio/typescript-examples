
https://www.typescriptlang.org/docs/home.html
https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
https://www.typescriptlang.org/docs/handbook/basic-types.html
https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html

-- Microsoft Repos with examples and starters --
Note: repos include step-by-step to build examples
https://github.com/microsoft/TypeScript-Babel-Starter

https://github.com/microsoft/TypeScript-Vue-Starter
https://github.com/microsoft/TypeScript-React-Native-Starter

-- Debugging --
https://code.visualstudio.com/docs/typescript/typescript-debugging
Config: 
> launch.json (node)
 - "preLaunchTask": "tsc: build - tsconfig.json"
 - "program": "${file}" (useful)
> tsconfig.json
 - "sourceMap": true

Migrating from JavaScript
https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html


-- Code --
> Check for null or undefined (using == instead of ===):
some_variable == null
some_variable != null
Note: Requires that some_variable has been declared, otherwise a ReferenceError will be thrown
https://stackoverflow.com/questions/2559318/how-to-check-for-an-undefined-or-null-variable-in-javascript

> Typings (.d.ts files)
Add export {} to make it to a module that will be recognized in project

- ex: app.d.ts
export {}

declare global {
  type Optional<T> = T | undefined
  type Nullable<T> = T | null
  type OptNull<T> = T | undefined | null
  type DateType = string | Date | Moment
  type PreciseNumberType = number | string | Big
  type ValueListener<T> = (value: T) => void
  type Predicate<T> = (v: T) => boolean

  type NestedPartial<T> = {
    [P in keyof T]?: NestedPartial<T[P]>
  }
}
